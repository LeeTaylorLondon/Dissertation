Realtime DatabaseIntroductionChoose a DatabaseiOS+Get StartedStructure DataRead and Write DataWork with Lists of DataEnable Offline CapabilitiesAndroidGet StartedStructure DataRead and Write DataWork with Lists of DataEnable Offline CapabilitiesWebGet StartedStructure DataRead and Write DataWork with Lists of DataEnable Offline CapabilitiesFlutterGet StartedStructure DataRead and Write DataWork with Lists of DataEnable Offline CapabilitiesAdminGet StartedStructure DataSave DataRetrieve DataRESTGet StartedStructure DataSave DataRetrieve DataAuthenticate REST RequestsC++Get StartedStructure DataSave DataRetrieve DataUnityGet StartedStructure DataSave DataRetrieve DataSecurity & RulesUnderstand RulesGet StartedStructure Security RulesWrite Conditions for Security RulesIndex DataManage Rules via RESTUsage and PerformanceUnderstand BillingRealtime Database LimitsMonitor Database UsageMonitor Database PerformanceScale with Multiple DatabasesProfile Your DatabaseOptimize Database PerformanceAutomated BackupsExtend with Cloud FunctionsVideo series: Firebase for SQL Developers
Serve dynamic content and host microservicesOverviewUse Cloud Functions for FirebaseUse Cloud RunManage cache behavior
iOS+Get StartedCreate a ReferenceUpload FilesDownload FilesUse File MetadataDelete FilesList FilesHandle Errors
Get started with Cloud Firestore — set up your database, then adddata and start reading it.
WebGet StartedStructure DataRead and Write DataWork with Lists of DataEnable Offline Capabilities
Cloud Firestore integrationsUse the Cloud Firestore REST APIUse Cloud Firestore and Realtime DatabaseExtend with Cloud FunctionsThird-party library integrations
Connect your app and prototypeGet startedConnect to the Authentication emulatorConnect to the Realtime Database emulatorConnect to the Firestore emulatorConnect to the Cloud Storage for Firebase emulatorUse the Hosting emulatorConnect to the Cloud Functions emulatorUse the Extensions emulator
Docs More Overview Fundamentals More Build More Release & Monitor More Engage More Reference Samples
Default providersiOS+ (DeviceCheck)iOS+ (App Attest)Android (Play Integrity)Android (SafetyNet, deprecated)Web (reCAPTCHA v3)Web (reCAPTCHA Enterprise)Flutter
Call functions directlyCall functions from your appCall functions via HTTP requestsEnqueue functions with Cloud TasksRun functions on a schedule
AndroidGet StartedCreate a ReferenceUpload FilesDownload FilesUse File MetadataDelete FilesList FilesHandle Errors
AndroidGet StartedStructure DataRead and Write DataWork with Lists of DataEnable Offline Capabilities
Trigger background functionsCloud Firestore triggersRealtime Database triggersRemote Config triggersAuthentication triggersAnalytics triggersCloud Storage triggersPub/Sub triggersTest Lab triggers
Cloud Functions (2nd gen) public previewOverviewGet startedCall functions directlyCallable functionsEnqueue functions with Cloud TasksCall functions via HTTP requestsRun functions on a scheduleTrigger background functionsFirebase Alerts triggersCustom event/extension triggersBlocking Auth triggersPub/Sub triggersRealtime Database triggersRemote Config triggersCloud Storage triggersTest Lab triggersWrite functionsConfigure your environmentManage deployment and runtime optionsOrganize functionsMonitor functionsAPI referencefirebase-functions
Cloud Firestore is a cloud-hosted, NoSQL database that your Apple, Android, and webapps can access directly via native SDKs. Cloud Firestore is also availablein native Node.js, Java, Python, Unity, C++ and Go SDKs, in addition to REST andRPC APIs.
Secure and validate dataOverviewGet startedStructure Security RulesWriting conditions for Security RulesFix insecure rulesTest your Security RulesSecurely query dataControl access per field
Emulator SuiteIntroductionConnect your app and prototypeGet startedConnect to the Authentication emulatorConnect to the Realtime Database emulatorConnect to the Firestore emulatorConnect to the Cloud Storage for Firebase emulatorUse the Hosting emulatorConnect to the Cloud Functions emulatorUse the Extensions emulatorInstall, configure and integrate
FlutterGet StartedManage UsersPassword AuthenticationEmail Link AuthenticationFederated Identity & SocialPhone NumberUse a Custom Auth SystemAnonymous AuthenticationMulti-factor AuthLink Multiple Auth ProvidersPassing State in Email ActionsHandle Errors
API ReferenceFirebase SDK for Cloud FunctionsTest SDKProtocol specification for https.onCall
Following Cloud Firestore's NoSQL data model, you store data in documents thatcontain fields mapping to values. These documents are stored incollections, which are containers for your documents that you can use toorganize your data and build queries. Documents support many differentdata types, from simple strings and numbers, tocomplex, nested objects. You can also create subcollections withindocuments and build hierarchical data structures that scale as yourdatabase grows. The Cloud Firestore data model supports whateverdata structure works best for your app.
UnityGet StartedCreate a ReferenceUpload FilesDownload FilesUse File MetadataDelete FilesHandle Errors
Use our flexible, scalable NoSQL cloud database to storeand sync data for client- and server-side development.
Usage, limits, and pricingUsage and limitsMonitor usageUnderstand Cloud Firestore billingExample Cloud Firestore costsUnderstand storage size calculations
Machine LearningIntroductionCodelabsCustom ModelsUse a custom modelOverviewiOS+AndroidFlutterDeploy & manage custom modelsMigrate from the legacy APIiOS+AndroidUse Cloud Vision APIsRecognize textOverviewiOS+AndroidLabel imagesOverviewiOS+AndroidRecognize landmarksOverviewiOS+AndroidDeprecated Vision SDKsRecognize textiOS+AndroidLabel imagesiOS+AndroidRecognize landmarksiOS+AndroidCloud AutoML Vision Edge (deprecated)OverviewTrain image labeling modelsLabel images with your modelsiOS+AndroidTrain object detection modelsDetect objects with your modelsiOS+AndroidMigrate datasetsAdvanced TopicsA/B test two versions of a modeliOS+AndroidPrepare for ProductionProtect your Cloud credentialsiOS+AndroidLegacy DocumentationML Kit for FirebaseIntroductionVisionRecognize textOverviewiOSAndroidDetect facesOverviewConceptsiOSAndroidScan barcodesOverviewiOSAndroidLabel imagesOverviewiOSAndroidDetect and track objectsOverviewiOSAndroidRecognize landmarksOverviewiOSAndroidAutoML Vision EdgeOverviewTrain image labeling modelsLabel images with your modelsiOSAndroidMigrate datasetsNatural LanguageIdentify the language of textOverviewiOSAndroidTranslate textOverviewiOSAndroidUsage guidelinesGenerate smart repliesOverviewiOSAndroidCustom ModelsUse a custom modelOverviewiOSAndroidManage hosted custom modelsUse a custom TensorFlow Lite buildiOSAndroidAdvanced TopicsA/B test two versions of a modeliOSAndroidPrepare for ProductionReduce app package sizeAndroidProtect your Cloud credentialsiOSAndroid
Security & RulesUnderstand RulesGet StartedStructure Security RulesWrite Conditions for Security RulesIndex DataManage Rules via REST
Call functions directlyCallable functionsEnqueue functions with Cloud TasksCall functions via HTTP requestsRun functions on a schedule
Explore all solutionsDiscover solutions for use cases in your apps and businesses
Integrate web frameworksOverviewIntegrate Angular UniversalIntegrate Next.jsIntegrate other frameworks with Express.js
App CheckIntroductionGet startedDefault providersiOS+ (DeviceCheck)iOS+ (App Attest)Android (Play Integrity)Android (SafetyNet, deprecated)Web (reCAPTCHA v3)Web (reCAPTCHA Enterprise)FlutterCustom providersServer implementationiOS+ client implementationAndroid client implementationWeb client implementationDebug & test providersUse the debug provider in iOS+Use the debug provider in AndroidUse the debug provider in web appsUse the debug provider with FlutterMonitor request metricsStandard Firebase servicesCloud Functions for FirebaseEnable enforcementStandard Firebase servicesCloud Functions for FirebaseProtect non-Firebase resourcesSend tokens from the clientiOS+AndroidWebFlutterVerify tokens on the backend
WebGet StartedCreate a ReferenceUpload FilesDownload FilesUse File MetadataDelete FilesList FilesHandle Errors
Read dataGet dataGet real-time updatesPerform simple and compound queriesOrder and limit dataCount documents with aggregation queriesPaginate data with query cursorsAccess data offlineManage indexes
Test Security RulesSet up the emulatorBuild unit testsGenerate test reportsQuickly validate Security Rules
Cloud Firestore is a flexible, scalable database for mobile, web,and server development from Firebase and Google Cloud. LikeFirebase Realtime Database, it keeps your data in sync across client apps throughrealtime listeners and offers offline support for mobile and web so you canbuild responsive apps that work regardless of network latency or Internetconnectivity. Cloud Firestore also offers seamless integration with other Firebaseand Google Cloud products, including Cloud Functions.
ML Kit for FirebaseIntroductionVisionRecognize textOverviewiOSAndroidDetect facesOverviewConceptsiOSAndroidScan barcodesOverviewiOSAndroidLabel imagesOverviewiOSAndroidDetect and track objectsOverviewiOSAndroidRecognize landmarksOverviewiOSAndroidAutoML Vision EdgeOverviewTrain image labeling modelsLabel images with your modelsiOSAndroidMigrate datasetsNatural LanguageIdentify the language of textOverviewiOSAndroidTranslate textOverviewiOSAndroidUsage guidelinesGenerate smart repliesOverviewiOSAndroidCustom ModelsUse a custom modelOverviewiOSAndroidManage hosted custom modelsUse a custom TensorFlow Lite buildiOSAndroidAdvanced TopicsA/B test two versions of a modeliOSAndroidPrepare for ProductionReduce app package sizeAndroidProtect your Cloud credentialsiOSAndroid
Understand Cloud FirestoreCompare Cloud Firestore and Realtime DatabaseData modelData typesSDKs and client librariesIndex typesDatabase locationsData bundles
FlutterGet StartedStructure DataRead and Write DataWork with Lists of DataEnable Offline Capabilities
FlutterGet StartedCreate a ReferenceUpload FilesDownload FilesUse File MetadataDelete FilesList FilesHandle Errors
Understand Security RulesSecurity Rules languageHow Security Rules workSecurity Rules and Firebase Authentication
SolutionsOverviewFirestore Lite Web SDKAggregation QueriesDistributed countersFull-text searchBuild presenceSecure data access for users and groupsDelete data with a callable Cloud FunctionSchedule data exportsSharded timestampsGeo queriesAutomating database creationReduce index costs with map fieldsServe bundled Firestore content from a CDN
Cloud FirestoreIntroductionGet startedUnderstand Cloud FirestoreCompare Cloud Firestore and Realtime DatabaseData modelData typesSDKs and client librariesIndex typesDatabase locationsData bundlesAdd and manage dataStructure dataAdd dataTransactions and batched writesData contention in transactionDelete dataManage Cloud Firestore with the Firebase consoleExport and import dataManage data retention with time-to-live policiesProcess data in bulk with DataflowMove data between projectsRead dataGet dataGet real-time updatesPerform simple and compound queriesOrder and limit dataCount documents with aggregation queriesPaginate data with query cursorsAccess data offlineManage indexesSecure and validate dataOverviewGet startedStructure Security RulesWriting conditions for Security RulesFix insecure rulesTest your Security RulesSecurely query dataControl access per fieldSolutionsOverviewFirestore Lite Web SDKAggregation QueriesDistributed countersFull-text searchBuild presenceSecure data access for users and groupsDelete data with a callable Cloud FunctionSchedule data exportsSharded timestampsGeo queriesAutomating database creationReduce index costs with map fieldsServe bundled Firestore content from a CDNUsage, limits, and pricingUsage and limitsMonitor usageUnderstand Cloud Firestore billingExample Cloud Firestore costsUnderstand storage size calculationsTechniques and best practicesBest practices for Cloud FirestoreMap data with Swift CodableCloud Firestore integrationsUse the Cloud Firestore REST APIUse Cloud Firestore and Realtime DatabaseExtend with Cloud FunctionsThird-party library integrationsAPI referenceAndroidSwiftObjective-CWebFlutterCloud FunctionsNode.jsJavaPythonGoC#PHPRubyC++UnityRESTRPCSamplesiOSAndroidWeb
Write functionsManage deployment and runtime optionsWrite functions in TypeScriptSync, async, and promisesRetry asynchronous functionsConfigure your environmentOrganize functionsHandling dependenciesOptimizing networkingTips & tricks
Techniques and best practicesBest practices for Cloud FirestoreMap data with Swift Codable
StorageIntroductioniOS+Get StartedCreate a ReferenceUpload FilesDownload FilesUse File MetadataDelete FilesList FilesHandle ErrorsAndroidGet StartedCreate a ReferenceUpload FilesDownload FilesUse File MetadataDelete FilesList FilesHandle ErrorsWebGet StartedCreate a ReferenceUpload FilesDownload FilesUse File MetadataDelete FilesList FilesHandle ErrorsFlutterGet StartedCreate a ReferenceUpload FilesDownload FilesUse File MetadataDelete FilesList FilesHandle ErrorsAdminGet StartedC++Get StartedCreate a ReferenceUpload FilesDownload FilesUse File MetadataDelete FilesHandle ErrorsUnityGet StartedCreate a ReferenceUpload FilesDownload FilesUse File MetadataDelete FilesHandle ErrorsSecurity & RulesUnderstand SecurityGet StartedStructure Security RulesWrite Conditions for Security RulesMonitor activityExtend with Cloud FunctionsIntegrate with Google Cloud
C++Get StartedCreate a ReferenceUpload FilesDownload FilesUse File MetadataDelete FilesHandle Errors
Debug & test providersUse the debug provider in iOS+Use the debug provider in AndroidUse the debug provider in web appsUse the debug provider with Flutter
ExtensionsIntroductionUse an extension in your projectOverviewInstall an extensionManage installed extensionsPermissions granted to an extensionManage configurations with manifestsExtensions by FirebaseTrigger EmailGet startedUse Handlebars templatesManage delivery statusDelete User DataGet StartedFirestore Bundle BuilderGet StartedReferenceResize ImagesExport Collections to BigQueryTranslate TextDistributed CounterShorten URLsLimit Child NodesSamples
Additionally, querying in Cloud Firestore is expressive, efficient, and flexible.Create shallow queries to retrieve data at the document level without needing toretrieve the entire collection, or any nested subcollections. Add sorting,filtering, and limits to your queries or cursors topaginate your results. To keep data in your apps current, without retrievingyour entire database each time an update happens, add realtime listeners.Adding realtime listeners to your app notifies you with a data snapshot wheneverthe data your client apps are listening to changes, retrieving only the newchanges.
Security RulesIntroductionGet startedUnderstand Security RulesSecurity Rules languageHow Security Rules workSecurity Rules and Firebase AuthenticationWrite Security RulesBasic Security RulesAvoid insecure rulesData validationTest Security RulesSet up the emulatorBuild unit testsGenerate test reportsQuickly validate Security RulesManage and deploy Security Rules
Trigger background functionsFirebase Alerts triggersCustom event/extension triggersBlocking Auth triggersPub/Sub triggersRealtime Database triggersRemote Config triggersCloud Storage triggersTest Lab triggers
Security & RulesUnderstand SecurityGet StartedStructure Security RulesWrite Conditions for Security Rules
Protect access to your data in Cloud Firestore with Firebase Authentication andCloud Firestore Security Rules for Android, Apple platforms, and JavaScript, or Identityand Access Management (IAM) for server-side languages.
Usage and PerformanceUnderstand BillingRealtime Database LimitsMonitor Database UsageMonitor Database PerformanceScale with Multiple DatabasesProfile Your DatabaseOptimize Database Performance
Add and manage dataStructure dataAdd dataTransactions and batched writesData contention in transactionDelete dataManage Cloud Firestore with the Firebase consoleExport and import dataManage data retention with time-to-live policiesProcess data in bulk with DataflowMove data between projects
Cloud FunctionsIntroductionExplore use casesGet startedCall functions directlyCall functions from your appCall functions via HTTP requestsEnqueue functions with Cloud TasksRun functions on a scheduleTrigger background functionsCloud Firestore triggersRealtime Database triggersRemote Config triggersAuthentication triggersAnalytics triggersCloud Storage triggersPub/Sub triggersTest Lab triggersWrite functionsManage deployment and runtime optionsWrite functions in TypeScriptSync, async, and promisesRetry asynchronous functionsConfigure your environmentOrganize functionsHandling dependenciesOptimizing networkingTips & tricksTest functionsRun functions locallyUnit testing functionsTest functions interactivelyMonitor functionsWrite and view logsReport errorsView monitored metricsAPI ReferenceFirebase SDK for Cloud FunctionsTest SDKProtocol specification for https.onCallCloud Functions (2nd gen) public previewOverviewGet startedCall functions directlyCallable functionsEnqueue functions with Cloud TasksCall functions via HTTP requestsRun functions on a scheduleTrigger background functionsFirebase Alerts triggersCustom event/extension triggersBlocking Auth triggersPub/Sub triggersRealtime Database triggersRemote Config triggersCloud Storage triggersTest Lab triggersWrite functionsConfigure your environmentManage deployment and runtime optionsOrganize functionsMonitor functionsAPI referencefirebase-functionsVideo Series: learn Cloud FunctionsCloud Functions and FirebaseCloud Functions locationsQuotas and limits
iOS+Get StartedStructure DataRead and Write DataWork with Lists of DataEnable Offline Capabilities
Capability-based security, concept in the design of secure computing systems
Capability Maturity Model Integration, a process improvement training and appraisal program
This page was last edited on 9 September 2021, at 12:02 (UTC).
A capability is the ability to execute a specified course of action or to achieve certain outcomes.
As it applies to human capital, capability represents performing or achieving certain actions/outcomes in terms of the intersection of capacity and ability.
Capability-based addressing, scheme used by some computers to control access to memory
Capability (systems engineering), the ability to execute a specified course of action
Capability management in business, capacity, materials, and expertise an organization needs in order to perform core functions

